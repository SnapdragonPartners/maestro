package architect

import (
	"context"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"orchestrator/pkg/config"
	"orchestrator/pkg/proto"
	"orchestrator/pkg/state"
)

func TestNewDriver(t *testing.T) {
	stateStore, _ := state.NewStore("/tmp/architect_test_state")
	workDir := "/tmp/architect_test"
	storiesDir := "/tmp/stories_test"

	driver := NewDriver("architect-001", stateStore, workDir, storiesDir)

	if driver == nil {
		t.Fatal("NewDriver returned nil")
	}

	if driver.architectID != "architect-001" {
		t.Errorf("Expected architectID 'architect-001', got %s", driver.architectID)
	}

	if driver.currentState != StateSpecParsing {
		t.Errorf("Expected initial state %s, got %s", StateSpecParsing, driver.currentState)
	}

	if driver.workDir != workDir {
		t.Errorf("Expected workDir %s, got %s", workDir, driver.workDir)
	}

	if driver.storiesDir != storiesDir {
		t.Errorf("Expected storiesDir %s, got %s", storiesDir, driver.storiesDir)
	}
}

func TestStateTransitions(t *testing.T) {
	stateStore, _ := state.NewStore("/tmp/architect_test_state")
	driver := NewDriver("architect-001", stateStore, "/tmp/test", "/tmp/stories")

	ctx := context.Background()

	// Initialize driver
	err := driver.Initialize(ctx)
	if err != nil {
		t.Fatalf("Failed to initialize driver: %v", err)
	}

	// Test state transitions
	testCases := []struct {
		fromState State
		toState   State
	}{
		{StateSpecParsing, StateStoryGeneration},
		{StateStoryGeneration, StateQueueAndDispatch},
		{StateQueueAndDispatch, StateDone},
	}

	for _, tc := range testCases {
		driver.currentState = tc.fromState

		err := driver.transitionTo(ctx, tc.toState, nil)
		if err != nil {
			t.Errorf("Failed to transition from %s to %s: %v", tc.fromState, tc.toState, err)
		}

		if driver.currentState != tc.toState {
			t.Errorf("Expected state %s, got %s", tc.toState, driver.currentState)
		}

		// Verify state data was updated
		stateData := driver.GetStateData()
		if stateData["current_state"] != string(tc.toState) {
			t.Errorf("State data not updated correctly")
		}
	}
}

func TestProcessWorkflowMockMode(t *testing.T) {
	stateStore, _ := state.NewStore("/tmp/architect_test_state")

	// Clean up any existing state
	stateStore.DeleteState("architect-001")

	driver := NewDriver("architect-001", stateStore, "/tmp/test", "/tmp/stories")

	ctx := context.Background()

	// Initialize driver
	err := driver.Initialize(ctx)
	if err != nil {
		t.Fatalf("Failed to initialize driver: %v", err)
	}

	// Verify starting state
	if driver.currentState != StateSpecParsing {
		t.Fatalf("Expected initial state %s, got %s", StateSpecParsing, driver.currentState)
	}

	// Process workflow in mock mode
	err = driver.ProcessWorkflow(ctx, "/tmp/mock_spec.md")
	if err != nil {
		t.Fatalf("Failed to process workflow: %v", err)
	}

	// Verify final state
	if driver.currentState != StateDone {
		t.Errorf("Expected final state %s, got %s", StateDone, driver.currentState)
	}

	// Verify state data
	stateData := driver.GetStateData()

	if stateData["spec_file"] != "/tmp/mock_spec.md" {
		t.Errorf("Spec file not stored correctly")
	}

	// Check that workflow completed with expected state transitions
	if stateData["spec_parsing_completed_at"] == nil {
		t.Logf("State data keys: %v", getKeys(stateData))
		t.Errorf("Spec parsing completion time not recorded")
	}

	if stateData["story_generation_completed_at"] == nil {
		t.Errorf("Story generation completion time not recorded")
	}

	if stateData["queue_management_completed_at"] == nil {
		t.Errorf("Queue management completion time not recorded")
	}

	if stateData["dispatching_completed_at"] == nil {
		t.Errorf("Dispatching completion time not recorded")
	}
}

func TestStatePersistence(t *testing.T) {
	stateStore, _ := state.NewStore("/tmp/architect_test_state")
	driver1 := NewDriver("architect-001", stateStore, "/tmp/test", "/tmp/stories")

	ctx := context.Background()

	// Initialize and transition to a specific state
	err := driver1.Initialize(ctx)
	if err != nil {
		t.Fatalf("Failed to initialize driver: %v", err)
	}

	err = driver1.transitionTo(ctx, StateStoryGeneration, map[string]interface{}{
		"test_data": "test_value",
	})
	if err != nil {
		t.Fatalf("Failed to transition state: %v", err)
	}

	// Create a new driver instance and load state
	driver2 := NewDriver("architect-001", stateStore, "/tmp/test", "/tmp/stories")
	err = driver2.Initialize(ctx)
	if err != nil {
		t.Fatalf("Failed to initialize second driver: %v", err)
	}

	// Verify state was restored
	if driver2.currentState != StateStoryGeneration {
		t.Errorf("Expected restored state %s, got %s", StateStoryGeneration, driver2.currentState)
	}

	stateData := driver2.GetStateData()
	if stateData["test_data"] != "test_value" {
		t.Errorf("State data not restored correctly")
	}
}

func TestStateEnumConstants(t *testing.T) {
	// Verify all state constants are defined
	expectedStates := []State{
		StateSpecParsing,
		StateStoryGeneration,
		StateQueueAndDispatch,
		StateAwaitHumanFeedback,
		StateDone,
		StateError,
	}

	for _, state := range expectedStates {
		if string(state) == "" {
			t.Errorf("State constant %v is empty", state)
		}
	}

	// Verify state constants are unique
	stateMap := make(map[State]bool)
	for _, state := range expectedStates {
		if stateMap[state] {
			t.Errorf("Duplicate state constant: %s", state)
		}
		stateMap[state] = true
	}
}

func TestNewDriverWithO3(t *testing.T) {
	stateStore, _ := state.NewStore("/tmp/architect_test_state")
	workDir := "/tmp/architect_test"
	storiesDir := "/tmp/stories_test"

	// Create a mock model config
	modelConfig := &config.ModelCfg{
		MaxTokensPerMinute: 1000,
		MaxBudgetPerDayUSD: 10.0,
		APIKey:             "test-api-key",
		MaxContextTokens:   128000,
		MaxReplyTokens:     4096,
		CompactionBuffer:   2000,
	}

	driver := NewDriverWithO3("architect-001", stateStore, modelConfig, "test-api-key", workDir, storiesDir)

	if driver == nil {
		t.Fatal("NewDriverWithO3 returned nil")
	}

	if driver.architectID != "architect-001" {
		t.Errorf("Expected architectID 'architect-001', got %s", driver.architectID)
	}

	if driver.llmClient == nil {
		t.Error("LLM client was not initialized")
	}

	// Test that the LLM client is an O3Client
	if o3Client, ok := driver.llmClient.(*O3Client); ok {
		if o3Client.GetModel() != "o3-mini" {
			t.Errorf("Expected default O3 model 'o3-mini', got '%s'", o3Client.GetModel())
		}
	} else {
		t.Error("LLM client is not an O3Client")
	}
}

func TestDriverWithO3Integration(t *testing.T) {
	stateStore, _ := state.NewStore("/tmp/architect_test_state")

	// Clean up any existing state
	stateStore.DeleteState("architect-o3-test")

	modelConfig := &config.ModelCfg{
		MaxTokensPerMinute: 1000,
		MaxBudgetPerDayUSD: 10.0,
		APIKey:             "test-api-key",
		MaxContextTokens:   128000,
		MaxReplyTokens:     4096,
		CompactionBuffer:   2000,
	}

	driver := NewDriverWithO3("architect-o3-test", stateStore, modelConfig, "test-api-key", "/tmp/test", "/tmp/stories")

	ctx := context.Background()

	// Initialize driver
	err := driver.Initialize(ctx)
	if err != nil {
		t.Fatalf("Failed to initialize driver: %v", err)
	}

	// Test O3 client response (live API integration)
	o3Client := driver.llmClient.(*O3Client)
	response, err := o3Client.GenerateResponse(ctx, "Test prompt for O3 integration")

	// We expect an authentication error with test API key, which confirms the live API is working
	if err != nil {
		if strings.Contains(err.Error(), "401 Unauthorized") || strings.Contains(err.Error(), "Incorrect API key") {
			t.Logf("✅ Live O3 API integration working in driver - got expected auth error")
		} else {
			t.Fatalf("Unexpected error from O3 client: %v", err)
		}
	} else {
		// If somehow it worked (shouldn't with test key), verify it's a real response
		if response == "" {
			t.Error("O3 client returned empty response")
		} else {
			t.Logf("✅ Got live O3 API response in driver: %s", response[:min(100, len(response))])
		}
	}
}

func TestQueueIntegration(t *testing.T) {
	stateStore, _ := state.NewStore("/tmp/architect_test_state")
	tmpDir := "/tmp/queue_integration_test"
	defer func() {
		os.RemoveAll(tmpDir)
	}()

	// Create stories directory and test stories
	storiesDir := filepath.Join(tmpDir, "stories")
	err := os.MkdirAll(storiesDir, 0755)
	if err != nil {
		t.Fatalf("Failed to create stories directory: %v", err)
	}

	// Create test story files
	testStories := []struct {
		filename string
		content  string
	}{
		{
			"001.md",
			`---
id: 001
title: "Independent Story"
depends_on: []
est_points: 1
---
Independent story content.`,
		},
		{
			"002.md",
			`---
id: 002
title: "Dependent Story"
depends_on: [001]
est_points: 2
---
Story that depends on 001.`,
		},
	}

	for _, story := range testStories {
		storyPath := filepath.Join(storiesDir, story.filename)
		err := os.WriteFile(storyPath, []byte(story.content), 0644)
		if err != nil {
			t.Fatalf("Failed to create test story %s: %v", story.filename, err)
		}
	}

	// Create driver and test queue integration
	driver := NewDriver("architect-queue-test", stateStore, tmpDir, storiesDir)

	ctx := context.Background()
	err = driver.Initialize(ctx)
	if err != nil {
		t.Fatalf("Failed to initialize driver: %v", err)
	}

	// Test queue management state
	driver.currentState = StateQueueAndDispatch
	nextState, err := driver.handleQueueAndDispatch(ctx)
	if err != nil {
		t.Fatalf("Queue and dispatch failed: %v", err)
	}

	if nextState != StateDone {
		t.Errorf("Expected next state DISPATCHING, got %s", nextState)
	}

	// Verify queue was loaded correctly
	queue := driver.GetQueue()
	allStories := queue.GetAllStories()
	if len(allStories) != 2 {
		t.Errorf("Expected 2 stories in queue, got %d", len(allStories))
	}

	// Verify ready stories (only 001 should be ready initially)
	readyStories := queue.GetReadyStories()
	if len(readyStories) != 1 {
		t.Errorf("Expected 1 ready story, got %d", len(readyStories))
	}

	if readyStories[0].ID != "001" {
		t.Errorf("Expected ready story '001', got '%s'", readyStories[0].ID)
	}

	// Mark 001 as completed and check that 002 becomes ready
	err = queue.MarkCompleted("001")
	if err != nil {
		// First mark as in progress
		err = queue.MarkInProgress("001", "test-agent")
		if err != nil {
			t.Fatalf("Failed to mark 001 as in progress: %v", err)
		}
		err = queue.MarkCompleted("001")
		if err != nil {
			t.Fatalf("Failed to mark 001 as completed: %v", err)
		}
	}

	readyStories = queue.GetReadyStories()
	if len(readyStories) != 1 {
		t.Errorf("Expected 1 ready story after completing 001, got %d", len(readyStories))
	}

	if readyStories[0].ID != "002" {
		t.Errorf("Expected ready story '002', got '%s'", readyStories[0].ID)
	}
}

// Helper function to get keys from map for debugging
func getKeys(m map[string]interface{}) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	return keys
}

func TestQuestionHandlerIntegration(t *testing.T) {
	// Test question handler integration with driver
	stateStore, _ := state.NewStore("/tmp/architect_test_state")
	driver := NewDriver("test-arch", stateStore, "/tmp/test", "/tmp/stories")

	// Verify question handler is initialized
	if driver.questionHandler == nil {
		t.Fatal("Question handler should be initialized")
	}

	// Set up a test story
	driver.queue.stories["001"] = &QueuedStory{
		ID:              "001",
		Title:           "Test Story",
		Status:          StatusInProgress,
		EstimatedPoints: 2,
		FilePath:        "/tmp/test/001.md",
	}

	// Create a test question
	questionMsg := proto.NewAgentMsg(
		proto.MsgTypeQUESTION,
		"test-agent",
		"architect",
	)
	questionMsg.Payload["story_id"] = "001"
	questionMsg.Payload["question"] = "How should I implement authentication?"

	// Process the question
	ctx := context.Background()
	err := driver.questionHandler.HandleQuestion(ctx, questionMsg)
	if err != nil {
		t.Fatalf("Failed to handle question: %v", err)
	}

	// Verify question was processed
	status := driver.questionHandler.GetQuestionStatus()
	if status.TotalQuestions != 1 {
		t.Errorf("Expected 1 question, got %d", status.TotalQuestions)
	}

	if status.AnsweredQuestions != 1 {
		t.Errorf("Expected 1 answered question, got %d", status.AnsweredQuestions)
	}

	// Test business question escalation
	businessQuestionMsg := proto.NewAgentMsg(
		proto.MsgTypeQUESTION,
		"test-agent",
		"architect",
	)
	businessQuestionMsg.Payload["story_id"] = "001"
	businessQuestionMsg.Payload["question"] = "What are the business requirements for this?"

	err = driver.questionHandler.HandleQuestion(ctx, businessQuestionMsg)
	if err != nil {
		t.Fatalf("Failed to handle business question: %v", err)
	}

	// Verify escalation
	status = driver.questionHandler.GetQuestionStatus()
	if status.EscalatedQuestions != 1 {
		t.Errorf("Expected 1 escalated question, got %d", status.EscalatedQuestions)
	}

	t.Log("✅ Question handler integration with driver working correctly")
}

func TestReviewEvaluatorIntegration(t *testing.T) {
	// Test review evaluator integration with driver
	stateStore, _ := state.NewStore("/tmp/architect_test_state")
	driver := NewDriver("test-arch", stateStore, "/tmp/test", "/tmp/stories")

	// Verify review evaluator is initialized
	if driver.reviewEvaluator == nil {
		t.Fatal("Review evaluator should be initialized")
	}

	// Set up a test story
	driver.queue.stories["001"] = &QueuedStory{
		ID:              "001",
		Title:           "Test Story",
		Status:          StatusInProgress,
		EstimatedPoints: 2,
		FilePath:        "/tmp/test/001.md",
	}

	// Create a test code submission (RESULT message)
	resultMsg := proto.NewAgentMsg(
		proto.MsgTypeRESULT,
		"test-agent",
		"architect",
	)
	resultMsg.Payload["story_id"] = "001"
	resultMsg.Payload["code_content"] = "package main\n\nfunc main() {\n\tprintln(\"Hello, World!\")\n}"
	resultMsg.Payload["code_path"] = "/workspace/main.go"

	// Process the code submission
	ctx := context.Background()
	err := driver.reviewEvaluator.HandleResult(ctx, resultMsg)
	if err != nil {
		t.Fatalf("Failed to handle code submission: %v", err)
	}

	// Verify review was processed
	status := driver.reviewEvaluator.GetReviewStatus()
	if status.TotalReviews != 1 {
		t.Errorf("Expected 1 review, got %d", status.TotalReviews)
	}

	// Should have either approved or needs_fixes status depending on automated checks
	if status.ApprovedReviews == 0 && status.NeedsFixesReviews == 0 {
		t.Error("Review should be either approved or needs fixes")
	}

	// Test driver's reviewing state handler
	driver.currentState = StateQueueAndDispatch
	// The handleReviewing method no longer exists in v2 architecture
	// Reviewing is now handled by ReviewWorker goroutines
	nextState, err := driver.handleQueueAndDispatch(ctx)
	if err != nil {
		t.Fatalf("Failed to handle queue and dispatch state: %v", err)
	}

	if nextState != StateDone {
		t.Errorf("Expected next state COMPLETED, got %s", nextState)
	}

	t.Log("✅ Review evaluator integration with driver working correctly")
}
