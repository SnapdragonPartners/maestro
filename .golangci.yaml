# Enhanced Go linting configuration for orchestrator project
run:
  timeout: 10m  # Increased for comprehensive analysis
  modules-download-mode: readonly

linters:
  enable:
    # Core formatting and imports
    - gofmt
    - goimports
    - gci          # Controls Go package import order and makes it deterministic
    
    # Essential checks
    - govet
    - typecheck
    - staticcheck
    - unused
    - ineffassign
    - misspell
    
    # Error handling
    - errcheck
    - errorlint    # Find code that will cause problems with Go's error wrapping scheme
    - wrapcheck    # Checks that errors from external packages are wrapped
    
    # Code quality and maintainability
    - gosimple
    - goconst
    - unconvert
    - unparam
    - revive       # Fast, configurable, extensible, flexible, and beautiful linter (replaces golint)
    - cyclop       # Checks function and package cyclomatic complexity
    - dupl         # Tool for code clone detection
    - maintidx     # Measures the maintainability index of each function
    
    # Security
    - gosec        # Inspects source code for security problems
    - bodyclose    # Checks for unclosed HTTP response bodies
    - noctx        # Finds HTTP requests without context.Context
    
    # Nil safety (your additions)
    - nilerr       # Finds code that returns nil even if it checks that error is not nil
    - nilnesserr   # Reports constructs that check err != nil but return different nil value
    - nilnil       # Checks for simultaneous return of nil error and invalid value
    - forcetypeassert # Finds forced type assertions that could panic
    
    # Performance and resource management
    - makezero     # Finds slice declarations with non-zero initial length
    - prealloc     # Finds slice declarations where len or cap isn't necessary
    - containedctx # Detects struct fields that contain context.Context
    - contextcheck # Check whether the function uses a non-inherited context
    
    # Best practices
    - copyloopvar  # Checks for pointers to enclosing loop variables (replaces exportloopref)
    - gocritic     # Provides diagnostics that check for bugs, performance and style issues
    - gochecknoinits # Checks that no init functions are present in Go code
    - gochecknoglobals # Checks that no global vars are present
    - gomodguard   # Allow and block lists linter for direct Go module dependencies
    
    # Style and consistency
    - stylecheck   # Replacement for golint
    - whitespace   # Tool for detection of leading/trailing whitespace
    - dogsled      # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - nakedret     # Finds naked returns in functions greater than a specified function length
    - predeclared  # Find code that shadows one of Go's predeclared identifiers
    
    # Documentation
    - godot        # Check if comments end in a period

linters-settings:
  # Import organization
  gci:
    sections:
      - standard                           # Standard Go packages
      - default                           # External packages
      - prefix(orchestrator)              # Local packages
    skip-generated: true
  
  # Constants detection
  goconst:
    min-len: 3
    min-occurrences: 3                    # Increased to reduce noise
    ignore-tests: true
    match-constant: true
    numbers: false
    ignore-calls: true
  
  # Enhanced vet checks
  govet:
    enable:
      - shadow          # Detects shadowed variables (can mask nil checks)
      - nilness         # Reports likely nil pointer dereferences
      - unusedwrite     # Checks for writes to struct fields that are never read
      - fieldalignment  # Finds structs that can be rearranged to use less memory
      - sortslice       # Checks for calls to sort.Slice that do not use a slice type as first argument
    disable:
      - printf          # Too many false positives with logx usage
    
  # Comprehensive static analysis
  staticcheck:
    checks: ["all"]
  
  # Security scanning
  gosec:
    severity: medium
    confidence: medium
    excludes:
      - G204  # Subprocess launched with variable - common in our exec package
      - G304  # File path provided as taint input - needed for workspace management
      - G301  # Directory permissions - agent working directories need to be writable (0755)
    config:
      G302: "0644"  # File permissions should be 0644 or less
      G306: "0644"  # File permissions should be 0644 or less
  
  # Code complexity
  cyclop:
    max-complexity: 15        # Reasonable for orchestrator complexity
    package-average: 10.0
    skip-tests: true
  
  # Maintainability index
  maintidx:
    under: 20                 # Functions under 20 are flagged as hard to maintain
  
  # Code duplication
  dupl:
    threshold: 100            # Minimum token sequence as a duplicate
  
  # Style checking (replacement for golint)
  revive:
    severity: warning
    rules:
      - name: exported
        severity: error
        disabled: false
      - name: unexported-return
        severity: warning
        disabled: false
      - name: unused-parameter
        severity: warning
        disabled: false
      - name: unreachable-code
        severity: error
        disabled: false
      - name: redefines-builtin-id
        severity: error
        disabled: false
      - name: superfluous-else
        severity: warning
        disabled: false
      - name: var-naming
        severity: warning
        disabled: false
        arguments:
          - ["ID", "VM", "HTTP", "JSON", "API", "URI", "URL", "LLM", "AI", "FSM", "OS"] # Allow these common initialisms
  
  # Context checking
  contextcheck:
    check-generated: false
  
  # Error wrapping
  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
    ignoreSigRegexps:
      - \.New.*Error\(
    ignorePackageGlobs:
      - "orchestrator/pkg/logx"  # Our logging package handles errors specially
  
  # Error handling patterns
  errorlint:
    errorf: true
    asserts: true
    comparison: true
  
  # Function parameter usage
  unparam:
    check-exported: false     # Changed to false to reduce noise in public APIs
  
  # Naked returns
  nakedret:
    max-func-lines: 30        # Functions longer than 30 lines shouldn't use naked returns
  
  # Blank identifier assignments
  dogsled:
    max-blank-identifiers: 3  # Maximum number of blank identifiers in assignment
  
  # Preallocation
  prealloc:
    simple: true              # Only report preallocation suggestions on simple loops
    range-loops: true         # Report preallocation suggestions on range loops too
    for-loops: false          # Don't report preallocation suggestions on for loops
  
  # Code critic
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport           # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - importShadow        # Too many false positives
      - unnamedResult       # We use unnamed results intentionally in some places
    settings:
      captLocal:
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32
      
  # Module guard
  gomodguard:
    blocked:
      modules:
        - github.com/pkg/errors:
            recommendations:
              - errors
              - fmt
            reason: "Use standard library errors and fmt.Errorf instead"
      local_replace_directives: false

issues:
  exclude-use-default: false
  max-issues-per-linter: 0      # No limit on issues per linter
  max-same-issues: 0            # No limit on same issues
  new: false                    # Report issues in all code, not just new
  
  # Exclude patterns for specific scenarios
  exclude:
    # Allow embed directive violations for static assets
    - "should not use dot imports"
    # Allow specific variable names that might conflict with builtins
    - "var `new` is unused"
    - "var `make` is unused"
  
  exclude-rules:
    # Test files - be more lenient
    - path: "_test\\.go"
      linters:
        - errcheck          # Tests often ignore errors intentionally
        - goconst          # Tests often repeat small constants
        - gocritic         # Tests have different style requirements
        - cyclop           # Test functions can be more complex
        - maintidx         # Test functions are allowed to be less maintainable
        - dupl             # Test duplication is often acceptable
        - gochecknoglobals # Test globals are sometimes necessary
        - gochecknoinits   # Test init functions are sometimes necessary
        - gosec            # Security rules less critical in tests
        - wrapcheck        # Don't require error wrapping in tests
        - funlen           # Test functions can be longer
        - prealloc         # Preallocation less critical in tests
        
    # Example and integration test files
    - path: "example_test\\.go"
      linters:
        - errcheck
        - govet
        - gosec
        - unparam
        
    # Main files - CLI entry points have different patterns
    - path: "cmd/.*/main\\.go"
      linters:
        - gochecknoglobals # Main files can have globals
        - gochecknoinits   # Main files often need init functions
        
    # Generated files
    - path: "\\.pb\\.go"
      linters:
        - stylecheck
        - unused
        - govet
        
    # Mock files
    - path: "mock.*\\.go"
      linters:
        - unused
        - deadcode
        - unparam
        - gocritic
        
    # Migration/setup files that might need special patterns
    - path: "pkg/.*setup.*\\.go"
      linters:
        - gochecknoinits   # Setup files often need init functions
        - gochecknoglobals # Setup files might need globals
        
    # Executive packages that interface with external systems
    - path: "pkg/exec/.*\\.go"
      linters:
        - gosec            # Exec package needs to run subprocesses
        
    # Allow certain patterns in specific packages
    - path: "pkg/logx/.*\\.go"
      linters:
        - gochecknoglobals # Logging often uses globals
        - revive           # Logging has specialized patterns
        
    # Configuration packages might have complex validation
    - path: "pkg/config/.*\\.go"
      linters:
        - cyclop           # Config validation can be complex
        - maintidx         # Config parsing might be complex
        
    # Agent packages have state machines with higher complexity
    - path: "pkg/(agent|coder|architect)/.*\\.go"
      linters:
        - cyclop           # State machines can have higher complexity
        - maintidx         # State handling might be complex
        
    # Disable fieldalignment for certain structs that prioritize readability
    - linters:
        - govet
      text: "fieldalignment:"
      path: "pkg/(config|proto)/.*\\.go"
      
    # Disable specific gocritic rules that are too noisy
    - linters:
        - gocritic
      text: "commentedOutCode:"
      
    # Allow TODO comments in development
    - linters:
        - godox
      text: "TODO:"
      
    # Specific exclusions for common false positives
    - linters:
        - staticcheck
      text: "SA1019:"  # Deprecated function usage - sometimes necessary for compatibility
      
    - linters:
        - gosec
      text: "G304"    # File path from variable - necessary for workspace management
      path: "pkg/(workspace|coder)/.*\\.go"
      
    # Allow context.Background() in main and setup functions
    - linters:
        - contextcheck
      text: "Non-inherited new context"
      path: "(cmd/.*/main\\.go|.*setup.*\\.go)"

  # Exclude specific directories and files from certain checks
  exclude-dirs:
    - vendor
    - node_modules
    - .git
    
  exclude-files:
    - ".*\\.pb\\.go$"  # Skip protobuf generated files
